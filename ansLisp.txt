0.BFS
(defun bfs(tree)
 (cond ((null tree) nil)
  ((atom tree) (cons tree nil))   
  ((atom (car tree)) (append (cons (car tree) nil) (bfs (cdr tree))))
  (t (bfs (append (cdr tree)  (car tree ))))))

(bfs '((a (b)) c (d)))

Problem1: (defun wi (lst i) 
(if (= i 1) (first lst) 
(wi (rest lst) (- i 1)) ) 
) 
(defun length1 (lst) (if (null lst) 0 
(+ 1 (length1 (rest lst)) ) 
) ) 
(defun max7 (i w lst) 
(cond ((= i 0) 0) ((= w 0) 0) 
((> (wi lst i) w) (max7 (- i 1) w lst) ) (t (if (> (max7 (- i 1) w lst) ( + (max7 (- i 1) (- w (wi lst i)) lst ) (wi lst i) )) 
(max7 (- i 1) w lst) 
( + (max7 (- i 1) (- w (wi lst i)) lst) (wi lst i) ) ) 
) ) 
) (defun subset-sum1 (numbers capacity) (max7 (length numbers) capacity numbers) ) 
(defun subset-sum1 (lst w) (max7 (length1 lst) w lst) 
)
Problem2: 
(defun wi (lst i) 
(if (= i 1) (first lst) 
(wi (rest lst) (- i 1)) ) 
) 
(defun length1 (lst) (if (null lst) 0 
(+ 1 (length1 (rest lst)) ) 
) ) 
(defun max7 (i w lst) 
(cond ((= i 0) 0) ((= w 0) 0) 
((> (wi lst i) w) (max7 (- i 1) w lst) ) (t (if (> (max7 (- i 1) w lst) ( + (max7 (- i 1) (- w (wi lst i)) lst ) (wi lst i) )) 
(max7 (- i 1) w lst) 
( + (max7 (- i 1) (- w (wi lst i)) lst) (wi lst i) ) ) 
) ) 
) (defun subset-sum1 (numbers capacity) (max7 (length numbers) capacity numbers) ) 
(defun subset-sum1 (lst w) (max7 (length1 lst) w lst) 
) (defun pai (i w lst) 
(cond ((= i 0) nil) ((= w 0) nil) 
((> (wi lst i) w) (pai (- i 1) w lst) ) (t (if (> (max7 (- i 1) w lst) ( + (max7 (- i 1) (- w (wi lst i)) lst ) (wi lst i) )) 
) ) 
) ) 
(pai (- i 1) w lst) ( append (list (wi lst i)) 
(pai (- i 1) (- w (wi lst i)) lst) ) 
(defun subset-sum2 (numbers capacity) 
(append (list (subset-sum1 numbers capacity)) (list (pai (length1 numbers) capacity numbers)) ) 
) 